{
  "openapi": "3.0.3",
  "info": {
    "title": "@neith/express: Nodejs Boilerplate",
    "description": "The server uses [Winston](https://github.com/winstonjs/winston) and the native debug for log and debug.Winston is a logger for Node.js based on [log4J](https://logging.apache.org/log4J/2.x/).\n\nThe code written in TypeScript is transpilated to JavaScript using [Esbuild](https://esbuild.github.io/). Esbuild is an open source compiler that is faster than Babel. Written in GO, [tsx](https://github.com/esbuild-kit/tsx) was used for project automatic build.In addition, the [tsup](https://tsup.egoist.dev/) for server bundle, which is faster than [tsc](https://www.typescriptlang.org/docs/handbook/compilers-Options.html).\n\nFor communication, [Express](https://expressjs.com/en-br/) has been selected for being a lightweight, easy-to-use framework. In addition. With adding a Rate Limit Middleware layer for the routes [Express-rate-limit](https://github.com/express-limit/express-limit) and [Cors](https://github.com/expressjs/cors).\n\nFinally, for unit tests the [Jest](https://jestjs.io/) was the framework responsible for unit tests performed. In addition, the [supertest](https://github.com/ladjs/supertest) was used to test the routes with integration tests.",
    "contact": {
      "email": "zaujulio.dev@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.1.0"
  },
  "externalDocs": {
    "description": "Find out more about this project",
    "url": "https://github.com/ZauJulio/neith-express"
  },
  "servers": [
    {
      "url": "http://localhost:8080/"
    }
  ],
  "tags": [
    {
      "name": "Hello World",
      "description": "Welcome to boilerplate"
    }
  ],
  "paths": {
    "/hello": {
      "post": {
        "tags": [
          "hello"
        ],
        "summary": "Welcome to boilerplate",
        "description": "Say hello to API",
        "operationId": "hello",
        "requestBody": {
          "description": "name",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/helloInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/helloOutput"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "helloInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Neith"
          }
        }
      },
      "helloOutput": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Hello World, Neith"
          }
        }
      }
    },
    "requestBodies": {
      "verifyInput": {
        "description": "Name to be used as example",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/helloInput"
            }
          }
        }
      }
    },
    "responses": {
      "helloOutput": {
        "description": "Object that needs to be validated",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/helloOutput"
            }
          }
        }
      }
    }
  }
}